coefficients(Tost.hhn.DHab.nonUx)
Tost.hhn.DHab.nonU.Topo10z<-secr.fit(all.data.Tost, detectfn="HHN", mask=TostMask1,
model=list(D~stdGC, lambda0~Topo, sigma~1, noneuc ~ stdGC -1),
details = list(userdist = mydistFun),
start = list(noneuc = 1)) #-1 gets rid of the intercept
coefficients(Tost.hhn.DHab.nonU.Topo10x)
coefficients(Tost.hhn.DHab.nonU.Topo10z)
Tost.hhn.DHab.nonU.Wz<-secr.fit(all.data.Tost, detectfn="HHN", mask=TostMask1,
model=list(D~stdGC, lambda0~Water, sigma~1, noneuc ~ stdGC -1),
details = list(userdist = mydistFun),
start = list(noneuc = 1)) #-1 gets rid of the intercept
Tost.hhn.DHab.nonU.T01Wz<-secr.fit(all.data.Tost, detectfn="HHN", mask=TostMask1,
model=list(D~stdGC, lambda0~Topo+Water, sigma~1, noneuc ~ stdGC -1),
details = list(userdist = mydistFun),
start = list(noneuc = 1)) #-1 gets rid of the intercept
Tost.hhn.D.DetW.nonUz<-secr.fit(all.data.Tost, detectfn="HHN", mask=TostMask1,
model=list(D~1, lambda0~Water, sigma~1,
noneuc ~ stdGC -1),
details = list(userdist = mydistFun),
start = list(noneuc = 1))
Tost.hhn.D.DetT10.nonUz<-secr.fit(all.data.Tost, detectfn="HHN", mask=TostMask1,
model=list(D~1, lambda0~Topo, sigma~1,
noneuc ~ stdGC -1),
details = list(userdist = mydistFun),
start = list(noneuc = 1))
Tost.hhn.DHab.nonU.GBx<-secr.fit(all.data.Tost, detectfn="HHN", mask=TostMask1,
model=list(D~stdGC, lambda0~1, sigma~1, noneuc ~ stdBC-1),
details = list(userdist = userdfn1),
start = list(noneuc = 1))
Tost.hhn.DHab.nonU.GBz<-secr.fit(all.data.Tost, detectfn="HHN", mask=TostMask1,
model=list(D~stdGC, lambda0~1, sigma~1, noneuc ~ stdBC-1),
details = list(userdist = mydistFun),
start = list(noneuc = 1))
Tost.hhn.DGB.nonU.GCz<-secr.fit(all.data.Tost, detectfn="HHN", mask=TostMask1,
model=list(D~stdBC, lambda0~1, sigma~1, noneuc ~stdGC-1),
details = list(userdist = mydistFun),
start = list(noneuc = 1))
coefficients(Tost.hhn.DHab.nonU.GBGCz)
Tost.hhn.DGB.nonU.GCz
coefficients(Tost.hhn.DGB.nonU.GCx)
coefficients(Tost.hhn.DGB.nonU.GCz)
AICTostz=AIC(Tost.hhnz, Tost.hhn.detTopo10z, Tost.hhn.detWaterz, Tost.hhn.DHabz, Tost.hhn.DHab.nonUz,
Tost.hhn.DHab.nonU.Topo10z,Tost.hhn.DHab.nonU.Wz, Tost.hhn.DHab.nonU.T01Wz,
Tost.hhn.D.nonUz, Tost.hhn.DHab.nonU.GBz, Tost.hhn.DHab.nonU.GBGCz)
Tost.hhn
Tost.hhnx
AICTostz=AIC(Tost.hhnx, Tost.hhn.detTopo10z, Tost.hhn.detWaterz, Tost.hhn.DHabz, Tost.hhn.DHab.nonUz,
Tost.hhn.DHab.nonU.Topo10z,Tost.hhn.DHab.nonU.Wz, Tost.hhn.DHab.nonU.T01Wz,
Tost.hhn.D.nonUz, Tost.hhn.DHab.nonU.GBz, Tost.hhn.DHab.nonU.GBGCz)
AICTostz=AIC(Tost.hhnx, Tost.hhn.detTopo10x, Tost.hhn.detWaterx, Tost.hhn.DHabx, Tost.hhn.DHab.nonUz,
Tost.hhn.DHab.nonU.Topo10z, Tost.hhn.DHab.nonU.Wz, Tost.hhn.DHab.nonU.T01Wz, Tost.hhn.D.nonUz,
Tost.hhn.D.DetW.nonUz, Tost.hhn.D.DetT10.nonUz, Tost.hhn.DHab.nonU.GBz, Tost.hhn.DGB.nonU.GCz)
Tost.hhn.D.nonUz
Tost.hhn.D.nonUx
Tost.hhn.D.nonUz<-secr.fit(all.data.Tost, detectfn="HHN", mask=TostMask1,
model=list(D~1, lambda0~1, sigma~1,
noneuc ~ stdGC -1),
details = list(userdist = mydistFun),
start = list(noneuc = 1))
AICTostz=AIC(Tost.hhnx, Tost.hhn.detTopo10x, Tost.hhn.detWaterx, Tost.hhn.DHabx, Tost.hhn.DHab.nonUz,
Tost.hhn.DHab.nonU.Topo10z, Tost.hhn.DHab.nonU.Wz, Tost.hhn.DHab.nonU.T01Wz, Tost.hhn.D.nonUz,
Tost.hhn.D.DetW.nonUz, Tost.hhn.D.DetT10.nonUz, Tost.hhn.DHab.nonU.GBz, Tost.hhn.DGB.nonU.GCz)
AICTostz
coefficients(Tost.hhn.DHab.nonU.GBz)
coefficients(Tost.hhn.DHab.nonU.GBx)
coefficients(Tost.hhn.DHab.nonU.GBz)
coefficients(Tost.hhn.DHab.nonU.Wx)
coefficients(Tost.hhn.DHab.nonU.Wz)
coefficients(Tost.hhn.DHab.nonUx)
coefficients(Tost.hhn.DHab.nonUz)
region.N(Tost.hhn.DHab.nonU.GBx)
region.N(Tost.hhn.DHab.nonU.GBz)
Tost.hhn.DHab.nonU.GBx<-secr.fit(all.data.Tost, detectfn="HHN", mask=TostMask1,
model=list(D~stdGC, lambda0~1, sigma~1, noneuc ~ stdBC-1),
details = list(userdist = userdfn1),
start = list(noneuc = 1))
Tost.hhn.DHab.nonU.Wx
coefficients(Tost.hhn.DHab.nonU.Wx)
coefficients(Tost.hhn.DHab.nonU.Wz)
coefficients(Tost.hhn.DHab.nonU.GBx)
coefficients(Tost.hhn.DHab.nonU.GBz)
AICTostz
coefficients(Tost.hhn.DHab.nonU.GBz)
region.N(Tost.hhn.DHab.nonU.GBx)
region.N(Tost.hhn.DHab.nonU.GBz)
AICTost=AIC(Tost.hhnx, Tost.hhn.detTopo10x, Tost.hhn.detWaterx, Tost.hhn.DHabx, Tost.hhn.DHab.nonUx,
Tost.hhn.DHab.nonU.Topo10x,Tost.hhn.DHab.nonU.Wx, Tost.hhn.DHab.nonU.T01Wx,
Tost.hhn.D.nonUx, Tost.hhn.DHab.nonU.GBx, Tost.hhn.DHab.nonU.GBGCx)
AICTost
coefficients(Tost.hhn.DHab.nonU.GBx)
coefficients(Tost.hhn.DHab.nonU.GBz)
Trial.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps2.txt",binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_T4.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
library(secr)
library(fields)
library(maptools)
source("scrplotting.r")
library(gdistance)
Trial.Data1<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps2.txt",
trapfile ="./Nepal Genetic/Madhu_T2.txt", detector="transect",fmt = "XY")
plot(RishiMask)
summary(covariates(RishiMask))
RishiMask <- read.mask (file = "C:/Users/Koustubh/Dropbox (Snow Leopard Trust)/CREEM/Spiti/RishiMask.txt",
spacing = 1000, header = TRUE)
plot(RishiMask)
summary(RishiMask)
?fx.total
fx.total(Tost.hhn.DHab.nonU.GBx)
fx.total(Tost.hhnx)
FXTost<-fx.total(Tost.hhnx)
plot(FXTost)
plot.Dsurface(FXTost)
plot(FXTost, covariate = 'D.sum', col = terrain.colors(16),
plottype = 'shaded')
plot(FXTost, covariate = 'D.sum', breaks = seq(0,10e-5,1e-5), poly = FALSE)
FXTost<-fx.total(Tost.hhnx)
plot(FXTost, covariate = 'D.sum', breaks = seq(0,10e-5,1e-5), poly = FALSE)
Tost.hhn.DHab.LamTopox<-secr.fit(all.data.Tost, model=list(D~stdGC, lambda0~Topo, sigma~1), detectfn="HHN", mask=TostMask1)
Tost.hhn.DHabx.LamWatx<-secr.fit(all.data.Tost, model=list(D~stdGC, lambda0~Water, sigma~1), detectfn="HHN", mask=TostMask1)
AICTost=AIC(Tost.hhnx, Tost.hhn.detTopo10x, Tost.hhn.detWaterx, Tost.hhn.DHabx, Tost.hhn.DHab.nonUx,
Tost.hhn.DHab.nonU.Topo10x,Tost.hhn.DHab.nonU.Wx, Tost.hhn.DHab.nonU.T01Wx,
Tost.hhn.D.nonUx, Tost.hhn.DHab.nonU.GBx, Tost.hhn.DHab.nonU.GBGCx,
Tost.hhn.DHab.LamTopox, Tost.hhn.DHabx.LamWatx)
AICTost
save(Tost.hhnx, Tost.hhn.detTopo10x, Tost.hhn.detWaterx, Tost.hhn.DHabx, Tost.hhn.DHab.nonUx,
Tost.hhn.DHab.nonU.Topo10x,Tost.hhn.DHab.nonU.Wx, Tost.hhn.DHab.nonU.T01Wx, Tost.hhn.D.nonUx,
Tost.hhn.DHab.nonU.GBGCx, Tost.hhn.DHab.nonU.GBx, Tost.hhn.DHab.LamTopox, Tost.hhn.DHabx.LamWatx,
file="./Tost/Tost-nonEuc-fitsx.RData")
load("./Tost/Tost-nonEuc-fitsx.RData")
AICTost
AICNoyon
NemegtAIC2xR
Trial.Data1<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps2.txt",
trapfile ="./Nepal Genetic/Madhu_T2.txt", detector="transect",fmt = "XY")
AICTost
coefficients(Tost.hhn.DHab.nonU.GBx)
AICNoyon
coefficients(Noyon.hhn.DHab.nonU.GBx)
NemegtAIC2xR
coefficients(Nemegt.hhn.DHab.nonU.LamW2xR)
coefficients(Nemegt.hhn.DHab.nonU.LamW2xR)
coefficients(Nemegt.hhn.DHab.nonU.LamW2xR)
NemegtAIC2xR
Nemegt.hhn.DHab.nonU.GB.LamW2xR<-secr.fit(all.data.Nemegt_R, detectfn="HHN", mask=NemegtMask12x,
model=list(D~stdGC, lambda0~Water, sigma~1, noneuc ~ stdBC -1),
details = list(userdist = userdfn1),
start = list(noneuc = 1)) #-1 gets rid of the intercept
NemegtAIC2xR=AIC(Nemegt.hhn2xR, Nemegt.hhn.detrgd2xR, Nemegt.hhn.DHab2xR, Nemegt.hhn.DHab.detrgd102xR,
Nemegt.hhn.DHab.detrgd012xR, Nemegt.hhn.DHab.nonU2xR, Nemegt.hhn.D.nonU2xR,
Nemegt.hhn.DHab.nonU.GB2xR, Nemegt.hhn.DHab.nonU.LamTopoR, Nemegt.hhn.DHab.nonU.LamW2xR,
Nemegt.hhn.DHab.nonU.LamTopoW2R, Nemegt.hhn.DHab.nonU.GB.LamW2xR)
NemegtAIC2xR
coefficients(Nemegt.hhn.DHab.nonU.GB.LamW2xR)
region.N(Nemegt.hhn.DHab.nonU.GB.LamW2xR)
NemegtAIC2xR
coefficients(Nemegt.hhn.DHab.nonU.LamTopoW2R)
NemegtAIC2xR
NemegtAIC2xR=AIC(Nemegt.hhn2xR, Nemegt.hhn.detrgd2xR, Nemegt.hhn.DHab2xR, Nemegt.hhn.DHab.detrgd102xR,
Nemegt.hhn.DHab.detrgd012xR, Nemegt.hhn.DHab.nonU2xR, Nemegt.hhn.D.nonU2xR,
Nemegt.hhn.DHab.nonU.GB2xR, Nemegt.hhn.DHab.nonU.LamTopoR, Nemegt.hhn.DHab.nonU.LamW2xR,
Nemegt.hhn.DHab.nonU.LamTopoW2R)
NemegtAIC2xR
coefficients(Nemegt.hhn.DHab.nonU.LamW2xR)
region.N(Nemegt.hhn.DHab.nonU.LamW2xR)
region.N(Tost.hhn.DHab.nonU.GBx)
region.N(Noyon.hhn.DHab.nonU.GBx)
Noyon_Null<-region.N(Noyon.hhnx)
Noyon_Null
Nemegt_Null<-region.N(Nemegt.hhn2xR)
Nemegt_Null
Tost_null<-region.N(Tost.hhnx)
Tost_null
library(secr)
library(fields)
library(maptools)
source("scrplotting.r")
library(gdistance)
Madhu.Data<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin",
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude", binary.usage=FALSE))
Madhu.Data<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt",
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude", binary.usage=FALSE))
Madhu.Data<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt",
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude", binary.usage=FALSE))
Trial.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps2.txt",binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_T4.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
Madhu.Data<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt",
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"), binary.usage=FALSE)
Madhu.Data<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt",
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"), binary.usage=FALSE)
Madhu.Data<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt",
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
Madhu.Data<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt",
trapfile ="./Nepal Genetic/Madhu_Traps_Fin_NoCov.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"), binary.usage=FALSE)
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
summary(Trial.Data)
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
?secr
make.capthist(captures=NepalCaps,traps=NepalTraps,fmt="XY")
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
library(secr)
install.packages("secr")
library(secr)
library(secr)
version()
ver()
R.Version()
update.R()
install.packages("installr")
?installr
?installr()
?installr
require(installr)
updateR()
library(installr)
updateR()
library(secr)
install.packages("sp")
library(secr)
install.packages("Rcpp")
library(secr)
library(secr)
install.packages("Rcpp")
install(Rcpp)
install.packages("Rcpp")
library(secr)
library(secr)
install.packages("Rcpp")
library(fields)
library(maptools)
install.packages("sp")
library(secr)
install.packages("secr")
library(secr)
install.packages("Rcpp")
library(secr)
library(fields)
library(maptools)
source("scrplotting.r")
library(gdistance)
install.packages("fields")
install.packages("maptools")
install.packages("gdistance")
library(secr)
library(fields)
library(maptools)
install.packages("maptools")
library(maptools)
library(gdistance)
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
summary(Madhu.Data2)
summary(covariates(Madhu.Data2))
covariates(Madhu.Data2)
summary(covariates(traps(Madhu.Data2)))
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
summary(Madhu.Data2)
summary(covariates(traps(Madhu.Data2)))
covariates(traps(Madhu.Data2))$stdAlt = scale(covariates(traps(Madu.Data2))$Altitude)
covariates(traps(Madhu.Data2))$stdAlt = scale(covariates(traps(Madhu.Data2))$Altitude)
summary(covariates(traps(Madhu.Data2)))
head(covariates(traps(Madhu.Data2)))
summary(Trial.Data1)
boundaryMadhu=readShapeSpatial("C:\Users\Koustubh\Dropbox (Snow Leopard Trust)\CREEM\Nepal\Madhu_poly1.shp")
boundaryMadhu=readShapeSpatial("C:/Users/Koustubh/Dropbox (Snow Leopard Trust)/CREEM/Nepal/Madhu_poly1.shp")
boundaryTost=readShapeSpatial("./Tost//Habitat/TostStudy_Area.shp")
plot(boundaryMadhu)
plot(boundaryMadhu)
version(R)
R.Version()
plot(boundaryMadhu)
MadhuMask=make.mask(traps(Madhu.Data2), spacing=1000, buffer = 12500, type="trapbuffer", poly=boundaryMadhu)
Madhu.Data2
boundaryMadhu
MadhuMask=make.mask(traps(Madhu.Data2), spacing=1000, buffer = 12500, type="trapbuffer", poly=boundaryMadhu)
traps(Madhu.Data2)
MadhuMask=make.mask(traps(Madhu.Data2), spacing=1000, buffer = 15000, type="trapbuffer", poly=boundaryMadhu)
MadhuMask=make.mask(traps(Madhu.Data2), spacing=1000, buffer = 25000, type="trapbuffer", poly=boundaryMadhu)
MadhuMask=make.mask(traps(Madhu.Data2), spacing=500, buffer = 25000, type="trapbuffer", poly=boundaryMadhu)
MadhuMask=make.mask(traps(Madhu.Data2), spacing=500, buffer = 25000, type="trapbuffer")
?make.mask
MadhuMask=make.mask(traps(Madhu.Data2), spacing=500, buffer = 25000, type="clusterbuffer", poly=boundaryMadhu)
MadhuMask=make.mask(traps(Madhu.Data2), spacing=500, buffer = 25000, type="clusterbuffer", poly=boundaryMadhu)
MadhuMask=make.mask(traps(Madhu.Data2), spacing=500, buffer = 25000, type="trapbuffer", poly=boundaryMadhu)
MadhuMask=make.mask(traps(Madhu.Data2), spacing=5000, buffer = 12500, type="trapbuffer", poly=boundaryMadhu)
MadhuMask=make.mask(spacing=5000, buffer = 12500, type="trapbuffer", poly=boundaryMadhu)
MadhuMask=make.mask(traps(Madhu.Data2), spacing=500, buffer = 12500, type="trapbuffer", poly=boundaryMadhu)
Madhu.Data2<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin.txt", detector="transect",fmt = "XY",
trapcovnames = c("Topography","Habitats","Altitude"))
plot(boundaryMadhu)
plot(Madhu.Data2, add=TRUE)
MadhuMask=make.mask(traps(Madhu.Data2), spacing=500, buffer = 12500, type="trapbuffer")
MadhuMask=make.mask(traps(Madhu.Data1), spacing=500, buffer = 12500, type="trapbuffer")
Madhu.Data1<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin_NoCov.txt", detector="transect",
fmt = "XY"))
Madhu.Data1<-read.capthist(captfile = "./Nepal Genetic/Madhu_Caps_Fin.txt", binary.usage=FALSE,
trapfile ="./Nepal Genetic/Madhu_Traps_Fin_NoCov.txt", detector="transect",
fmt = "XY")
MadhuMask=make.mask(traps(Madhu.Data2), spacing=500, buffer = 12500, type="trapbuffer")
MadhuMask=make.mask(traps(Madhu.Data2), spacing=500, buffer = 12500, type="rectangle")
MadhuMask=make.mask(traps(Madhu.Data2), spacing=500, buffer = 12500, type="polygon")
MadhuMask=make.mask(traps(Madhu.Data2), spacing=500, buffer = 12500, type="polygon", poly=boundaryMadhu)
plot(MadhuMask)
MadhuMask=make.mask(traps(Madhu.Data2), spacing=1000, buffer = 12500, type="polygon", poly=boundaryMadhu)
plot(MadhuMask)
plot(Madhu.Data1, add=TRUE)
MadhuMask=make.mask(traps(Madhu.Data1), spacing=1000, buffer = 12500, type="polygon", poly=boundaryMadhu)
plot(boundaryMadhu)
plot(Madhu.Data1, add=TRUE)
plot(MadhuMask)
plot(Madhu.Data1, add=TRUE)
RPSV(Madhu.Data1,CC=TRUE)
suggest.buffer(Madhu.Data1, detectfn = 'HHN', RBtarget = 0.001)
suggest.buffer(Madhu.Data1, detectfn = 'HHN', RBtarget = 0.001)
suggest.buffer(Madhu.Data1, detectfn = 'HN', RBtarget = 0.001)
suggest.buffer(Madhu.Data1, detectfn = 'HHN')
?suggest.buffer
suggest.buffer(Madhu.Data1, detectfn = "HHN")
secr.fit(Madhu.Data1, model=list(D~1, lambda0~1, sigma~1), detectfn="HHN", mask=MadhuMask)
Madhu.hhn<-secr.fit(Madhu.Data1, model=list(D~1, lambda0~1, sigma~1), detectfn="HHN", mask=MadhuMask)
MadhuMask=make.mask(traps(Madhu.Data1), spacing=1000, buffer = 12500, type="trapbuffer",
poly=boundaryMadhu)
MadhuMask=make.mask(traps(Madhu.Data1), spacing=1000, buffer = 12500, type="polygon",
poly=boundaryMadhu)
plot(MadhuMask)
MadhuMask=make.mask(traps(Madhu.Data1), spacing=1000, buffer = 12500, type="polybuffer",
poly=boundaryMadhu)
MadhuMask=make.mask(traps(Madhu.Data1), spacing=1000, buffer = 12500, type="trapbuffer",
poly=boundaryMadhu)
all.data.Nemegt3x<-read.capthist(captfile = "./Nemegt/Nemegt2013_Capture.csv",
trapfile = "./Nemegt/Nemegt2013_Cams_add1.csv",
detector="count", fmt = "trapID",
trapcovnames = c("Topo",	"Brokenness",	"Grass", "Rgd", "Water"))
library(secr)
library(fields)
library(maptools)
source("scrplotting.r")
all.data.Nemegt3x<-read.capthist(captfile = "./Nemegt/Nemegt2013_Capture.csv",
trapfile = "./Nemegt/Nemegt2013_Cams_add1.csv",
detector="count", fmt = "trapID",
trapcovnames = c("Topo",	"Brokenness",	"Grass", "Rgd", "Water"))
boundaryNemegt2x=readShapeSpatial("./Nemegt//Habitat/Nemegt_StudyArea2.shp")
summary(all.data.Nemegt2x)
all.data.Nemegt_R<-read.capthist(captfile = "./Nemegt/Nemegt2013_Capture_reduced.csv",
trapfile = "./Nemegt/Nemegt2013_Cams_add.csv",
detector="count", fmt = "trapID",
trapcovnames = c("Topo",	"Brokenness",	"Grass", "Rgd", "Water"),
binary.usage=FALSE)
summary(all.data.Nemegt_R)
all.data.Nemegt3x<-read.capthist(captfile = "./Nemegt/Nemegt2013_Capture_reduced.csv",
trapfile = "./Nemegt/Nemegt2013_Cams_add1.csv",
detector="count", fmt = "trapID",
trapcovnames = c("Topo",	"Brokenness",	"Grass", "Rgd", "Water"))
summary(all.data.Nemegt2x)
all.data.Nemegt_R<-read.capthist(captfile = "./Nemegt/Nemegt2013_Capture_reduced.csv",
trapfile = "./Nemegt/Nemegt2013_Cams_add.csv",
detector="count", fmt = "trapID",
trapcovnames = c("Topo",	"Brokenness",	"Grass", "Rgd", "Water"),
binary.usage=FALSE)
summary(all.data.Nemegt_R)
all.data.Nemegt_Rx<-read.capthist(captfile = "./Nemegt/Nemegt2013_Capture_reduced.csv",
trapfile = "./Nemegt/Nemegt2013_Cams_add1.csv",
detector="count", fmt = "trapID",
trapcovnames = c("Topo",	"Brokenness",	"Grass", "Rgd", "Water"),
binary.usage=FALSE)
boundaryNemegt2x=readShapeSpatial("./Nemegt//Habitat/Nemegt_StudyArea2.shp")
summary(all.data.NemegtRx)
summary(all.data.Nemegt_Rx)
plot(boundaryNemegt2x)
plot(x=all.data.Nemegt_Rx, add=TRUE)
plot(boundaryNemegt2x)
plot(x=all.data.Nemegt_Rx, add=TRUE)
text(traps(all.data.Nemegt_Rx),labels=as.character(1:40),cex=0.75)
NemegtMask=make.mask(traps(all.data.Nemegt_Rx), spacing=500, buffer = 25000, type="trapbuffer", poly=boundaryNemegt_Rx)
NemegtMask=make.mask(traps(all.data.Nemegt_Rx), spacing=500, buffer = 25000, type="trapbuffer", poly=boundaryNemegt2x)
SLCost.Nemegt<-readShapePoly("./Nemegt//Habitat/Nemegt_Rgd500m.shp")  #ruggedness pixels averaged over 500m radius
NemegtMask1<-addCovariates(NemegtMask, SLCost.Nemegt)
SLCostBINARY.Nemegt<-readShapePoly("./Tost//Habitat/tost_sl.shp")  #Logistic binary SL habitat created using telemetry data
NemegtMask1<-addCovariates(NemegtMask1, SLCostBINARY.Nemegt)
head(covariates(NemegtMask1))
names(covariates(NemegtMask1))[3:4] = c("binaryID","BINCODE") #Rename headers
summary(covariates(NemegtMask1))
covariates(NemegtMask1)$BINCODE[is.na(covariates(NemegtMask1)$BINCODE)] = 0
summary(covariates(NemegtMask1))
summary(covariates(traps(all.data.Nemegt_Rx)))
covariates(traps(all.data.Nemegt_Rx))$stdRgd = scale(covariates(traps(all.data.Nemegt_Rx))$Rgd)
summary(covariates(traps(all.data.Nemegt_Rx)))
head(covariates(traps(all.data.Nemegt_Rx)))
summary(covariates(NemegtMask1))
covariates(NemegtMask1)$stdGC = scale(covariates(NemegtMask1)$GRIDCODE)
covariates(NemegtMask1)$stdBC = scale(covariates(NemegtMask1)$BINCODE)
summary(covariates(NemegtMask1))
names(covariates(NemegtMask1))
head(covariates(NemegtMask1))
summary(covariates(NemegtMask1))
summary(covariates(traps(all.data.Nemegt_Rx)))
plot(NemegtMask1, covariate="stdGC", contour=FALSE, col=terrain.colors(10), legend = FALSE)
head(covariates(traps(all.data.Nemegt)))
head(covariates(NemegtMask1))
head(covariates(traps(all.data.Nemegt_Rx)))
head(covariates(NemegtMask1))
Nemegt.camsRx=traps(all.data.Nemegt_Rx)
NemegtAIC2xR
Nemegt.hhnRx<-secr.fit(all.data.Nemegt_Rx, model=list(D~1, lambda0~1, sigma~1), detectfn="HHN", mask=NemegtMask1)
Nemegt.hhnRx
Nemegt.hhn.DHab.nonU.LamWRx<-secr.fit(all.data.Nemegt_Rx, detectfn="HHN", mask=NemegtMask1,
model=list(D~stdGC, lambda0~Water, sigma~1, noneuc ~ stdGC -1),
details = list(userdist = userdfn1),
start = list(noneuc = 1)) #-1 gets rid of the intercept
Nemegt.hhn.DHabRx<-secr.fit(all.data.Nemegt_Rx, model=list(D~stdGC, lambda0~1, sigma~1), detectfn="HHN", mask=NemegtMask1)
Nemegt.hhn.DHab.detrgd10Rx<-secr.fit(all.data.Nemegt_Rx, model=list(D~stdGC, lambda0~stdRgd, sigma~1), detectfn="HHN", mask=NemegtMask1)
Nemegt.hhn.DHab.detrgd01Rx<-secr.fit(all.data.Nemegt_Rx, model=list(D~stdGC, lambda0~1, sigma~stdRgd), detectfn="HHN", mask=NemegtMask1)
AIXRx<-AIC(Nemegt.hhnRx, Nemegt.hhn.detrgdRx, Nemegt.hhn.DHabRx, Nemegt.hhn.DHab.detrgd10Rx,
Nemegt.hhn.DHab.detrgd01Rx, Nemegt.hhn.DHab.nonU.LamWRx)
Nemegt.hhn.detrgdRx
Nemegt.hhn.DHabRx
AIXRx<-AIC(Nemegt.hhnRx, Nemegt.hhn.DHabRx, Nemegt.hhn.DHab.detrgd10Rx,
Nemegt.hhn.DHab.detrgd01Rx, Nemegt.hhn.DHab.nonU.LamWRx)
AIXRx
coefficient(Nemegt.hhn.DHab.nonU.LamWRx)
coefficients(Nemegt.hhn.DHab.nonU.LamWRx)
region.N(Nemegt.hhn.DHab.nonU.LamWRx)
Nemegt.hhn.DHab.nonUBC.LamWRx<-secr.fit(all.data.Nemegt_Rx, detectfn="HHN", mask=NemegtMask1,
model=list(D~stdGC, lambda0~Water, sigma~1, noneuc ~ stdBC -1),
details = list(userdist = userdfn1),
start = list(noneuc = 1)) #-1 gets rid of the intercept
AIXRx<-AIC(Nemegt.hhnRx, Nemegt.hhn.DHabRx, Nemegt.hhn.DHab.detrgd10Rx,
Nemegt.hhn.DHab.detrgd01Rx, Nemegt.hhn.DHab.nonU.LamWRx, Nemegt.hhn.DHab.nonUBC.LamWRx)
AIXRx
coefficients(Nemegt.hhn.DHab.nonUBC.LamWRx)
region.N(Nemegt.hhn.DHab.nonUBC.LamWRx)
summary(all.data.Nemegt_Rx)
plot(boundaryNemegt2x)
plot(x=all.data.Nemegt_Rx, add=TRUE)
plot(x=all.data.Nemegt_Rx, add=TRUE, tracks=TRUE)
AIXRx
coefficients(Nemegt.hhn.DHab.nonUBC.LamWRx)
coefficients(Nemegt.hhn.DHab.nonU.LamWRx)
plot(NemegtMask1)
region.N(Nemegt.hhn.DHab.nonUBC.LamWRx)
region.N(Nemegt.hhn.DHab.nonU.LamWRx)
plot(boundaryNemegt2x)
plot(x=all.data.Nemegt_Rx, add=TRUE, tracks=TRUE)
text(traps(all.data.Nemegt_Rx),labels=as.character(1:40),cex=0.75)
all.data.Nemegt_Rx2<-read.capthist(captfile = "./Nemegt/Nemegt2013_Capture_reduced2.csv",
trapfile = "./Nemegt/Nemegt2013_Cams_add1.csv",
detector="count", fmt = "trapID",
trapcovnames = c("Topo",	"Brokenness",	"Grass", "Rgd", "Water"),
binary.usage=FALSE)
summary(covariates(traps(all.data.Nemegt_Rx)))
covariates(traps(all.data.Nemegt_Rx))$stdRgd = scale(covariates(traps(all.data.Nemegt_Rx))$Rgd)
summary(covariates(traps(all.data.Nemegt_Rx)))
head(covariates(traps(all.data.Nemegt_Rx)))
summary(covariates(NemegtMask1))
covariates(NemegtMask1)$stdGC = scale(covariates(NemegtMask1)$GRIDCODE)
covariates(NemegtMask1)$stdBC = scale(covariates(NemegtMask1)$BINCODE)
summary(covariates(NemegtMask1))
names(covariates(NemegtMask1))
summary(covariates(traps(all.data.Nemegt_Rx2)))
covariates(traps(all.data.Nemegt_Rx2))$stdRgd = scale(covariates(traps(all.data.Nemegt_Rx2))$Rgd)
summary(covariates(traps(all.data.Nemegt_Rx2)))
head(covariates(traps(all.data.Nemegt_Rx2)))
Nemegt.hhn.DHab.nonUBC.LamWRx2<-secr.fit(all.data.Nemegt_Rx2, detectfn="HHN", mask=NemegtMask1,
model=list(D~stdGC, lambda0~Water, sigma~1, noneuc ~ stdBC -1),
details = list(userdist = userdfn1),
start = list(noneuc = 1)) #-1 gets rid of the intercept
coefficients(Nemegt.hhn.DHab.nonUBC.LamWRx2)
region.N(Nemegt.hhn.DHab.nonUBC.LamWRx2)
summary(MadhuMask2a)
